#!/usr/bin/env python3
# Encrypted with CyberEncrypt
# This file will decrypt and run the original project

import os
import sys
import base64
import zlib
import marshal
import importlib.util
import tempfile
import shutil
import atexit
import argparse
import time
import ctypes
import gc
import platform
import random
import threading
import traceback

# Try to import colorama for colored output
try:
    from colorama import init, Fore, Style
    init(autoreset=True)
    colorama_available = True
except ImportError:
    # Define dummy colorama classes if not available
    class DummyColorama:
        def __init__(self):
            for color in ["BLACK", "RED", "GREEN", "YELLOW", "BLUE", "MAGENTA", "CYAN", "WHITE"]:
                setattr(self, color, "")
    Fore = Style = DummyColorama()
    colorama_available = False

# Memory protection utilities
def secure_memory_clear(data):
    """Securely clear data from memory to prevent dumps"""
    if isinstance(data, str):
        # Convert string to bytes if needed
        data = data.encode()
    
    if isinstance(data, bytes):
        # Overwrite data with zeros
        length = len(data)
        zeroes = b"\x00" * length
        
        # For CPython bytes objects, we can try to access the internal buffer
        try:
            # Get a memory view and overwrite with zeros
            buffer = memoryview(data)
            buffer_obj = buffer.obj
            
            # Force overwrite for CPython
            if hasattr(buffer_obj, "replace"):
                buffer_obj.replace(zeroes)
        except Exception:
            pass  # Fallback if direct buffer access fails
    
    # Force garbage collection to ensure memory gets freed
    gc.collect()

# Anti-debugging utilities
def detect_debugger():
    """Check if the current process is being debugged"""
    is_debugged = False
    
    # Windows-specific debugger detection
    if platform.system() == "Windows":
        try:
            # Check IsDebuggerPresent Windows API
            is_debugged = ctypes.windll.kernel32.IsDebuggerPresent() != 0
            
            # Additional check with CheckRemoteDebuggerPresent
            if not is_debugged:
                h_process = ctypes.windll.kernel32.GetCurrentProcess()
                p_is_debugged = ctypes.c_bool()
                ctypes.windll.kernel32.CheckRemoteDebuggerPresent(h_process, ctypes.byref(p_is_debugged))
                is_debugged = p_is_debugged.value
        except Exception:
            pass
    
    # Unix-specific debugger detection (simplified)
    elif platform.system() in ["Linux", "Darwin"]:
        try:
            # Check if traceback depth is suspicious
            is_debugged = len(traceback.extract_stack()) > 10
        except Exception:
            pass
    
    # Generic Python debugger detection
    try:
        # Check for common debugging modules
        debuggers = ["pdb", "pydevd", "ipdb", "PyDebug"]
        for debugger in debuggers:
            if debugger in sys.modules:
                is_debugged = True
    except Exception:
        pass
    
    # Use timing as an additional detection method
    try:
        start_time = time.time()
        # Execute code that would be slow under a debugger
        for i in range(1000):
            pass
        end_time = time.time()
        
        # If execution is suspiciously slow, might be debugged
        if (end_time - start_time) > 0.01:  # Arbitrary threshold
            is_debugged = True
    except Exception:
        pass
        
    return is_debugged

def protect_runtime(key, password):
    """Set up runtime protections and anti-debugging measures"""
    # Start anti-debugging thread
    def anti_debug_monitor():
        while True:
            try:
                if detect_debugger():
                    # If debugger detected, corrupt memory or exit
                    print(f"{Fore.RED}Runtime security violation detected. Terminating...{Style.RESET_ALL}")
                    # Corrupt sensitive data in memory
                    secure_memory_clear(key)
                    secure_memory_clear(password)
                    sys.exit(1)
                # Random sleep to make timing attacks harder
                time.sleep(random.uniform(1.0, 3.0))
            except Exception:
                pass
    
    # Start the anti-debugging monitor in a daemon thread
    thread = threading.Thread(target=anti_debug_monitor, daemon=True)
    thread.start()
    
    # Return a reference so it doesn't get garbage collected
    return thread

# Banner
banner = r"""
  ______      __             _____                             _   
 / ____/_  __/ /_  ___  ____/ ___/____  ____________  ______  / /_ 
/ /   / / / / __ \/ _ \/ ___\__ \/ __ \/ ___/ ___/ / / / __ \/ __/
/ /___/ /_/ / /_/ /  __/ /  ___/ / /_/ / /__/ /  / /_/ / /_/ / /_  
\____/\__, /_.___/\___/_/  /____/ .___/\___/_/   \__, / .___/\__/  
     /____/                    /_/              /____/_/           
                                                                    
        [+] Encrypted with CyberEncrypt
        [+] Running decrypted project...
"""

# Encrypted data (obfuscated)
_0x53a8c2b = "lRDuGu02IXSMXGo2eH3gaA=="
_0xe72fd19 = ""
_0x4f8e70a = "prd.py"

def print_banner():
    if colorama_available:
        colored_banner = banner.replace("CyberEncrypt", f"{Fore.GREEN}CyberEncrypt{Style.RESET_ALL}")
        print(f"{Fore.CYAN}{colored_banner}{Style.RESET_ALL}")
    else:
        print(banner)

def generate_key(password, salt):
    try:
        # Generate a key from the password using PBKDF2
        from cryptography.hazmat.primitives import hashes
        from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
        
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
        return key
    except ImportError:
        print(f"{Fore.RED}Error: cryptography package not found.{Style.RESET_ALL}")
        print("Please install it with: pip install cryptography")
        sys.exit(1)

def decrypt_content(encrypted_content, key):
    try:
        # Decrypt content using Fernet
        from cryptography.fernet import Fernet
        f = Fernet(key)
        return f.decrypt(encrypted_content)
    except Exception as e:
        print(f"{Fore.RED}Decryption error: {e}{Style.RESET_ALL}")
        sys.exit(1)

def extract_files(encrypted_data, key):
    # Decrypt and extract all files
    try:
        decrypted_data = decrypt_content(encrypted_data, key)
        decompressed = zlib.decompress(decrypted_data)
        files = marshal.loads(decompressed)
        return files
    except Exception as e:
        print(f"{Fore.RED}Decryption failed: {e}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Incorrect password or corrupted data.{Style.RESET_ALL}")
        sys.exit(1)

def create_temp_dir():
    # Create a temporary directory for the decrypted files
    temp_dir = tempfile.mkdtemp(prefix="cyber_encrypt_")
    
    # Register a cleanup function to remove the temporary directory on exit
    def cleanup():
        print(f"\n{Fore.YELLOW}Cleaning up temporary files...{Style.RESET_ALL}")
        shutil.rmtree(temp_dir, ignore_errors=True)
        print(f"{Fore.GREEN}Cleanup complete.{Style.RESET_ALL}")
    
    atexit.register(cleanup)
    return temp_dir

def install_dependencies(project_dir):
    """Install dependencies from requirements.txt if it exists"""
    req_file = os.path.join(project_dir, "requirements.txt")
    if os.path.exists(req_file):
        print(f"{Fore.YELLOW}Installing dependencies from requirements.txt...{Style.RESET_ALL}")
        try:
            import subprocess
            pip_cmd = [sys.executable, "-m", "pip", "install", "-r", req_file]
            result = subprocess.run(pip_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            if result.returncode == 0:
                print(f"{Fore.GREEN}Dependencies installed successfully!{Style.RESET_ALL}")
            else:
                print(f"{Fore.RED}Error installing dependencies: {result.stderr}{Style.RESET_ALL}")
        except Exception as e:
            print(f"{Fore.RED}Failed to install dependencies: {e}{Style.RESET_ALL}")
    else:
        print(f"{Fore.YELLOW}No requirements.txt found, skipping dependency installation{Style.RESET_ALL}")
        # Try to detect and install common packages by scanning imports
        detect_and_install_packages(project_dir)

def detect_and_install_packages(project_dir):
    """Scan Python files for imports and try to install common packages"""
    import re
    common_packages = {
        "dotenv": "python-dotenv",
        "requests": "requests",
        "bs4": "beautifulsoup4",
        "flask": "flask",
        "django": "django",
        "numpy": "numpy",
        "pandas": "pandas",
        "matplotlib": "matplotlib",
        "tensorflow": "tensorflow",
        "torch": "torch",
        "cv2": "opencv-python",
        "selenium": "selenium",
        "sqlalchemy": "sqlalchemy",
        "pymongo": "pymongo",
        "cryptography": "cryptography"
    }
    
    import_patterns = [
        re.compile(r"^\s*import\s+(\w+)"),
        re.compile(r"^\s*from\s+(\w+)"),
        re.compile(r"^\s*import\s+(\w+)\s+as"),
        re.compile(r"^\s*from\s+(\w+)\s+import")
    ]
    
    packages_to_install = set()
    
    # Walk through all Python files
    for root, _, files in os.walk(project_dir):
        for file in files:
            if file.endswith(".py"):
                file_path = os.path.join(root, file)
                try:
                    with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                        for line in f:
                            # Check for each import pattern
                            for pattern in import_patterns:
                                match = pattern.match(line)
                                if match:
                                    package_name = match.group(1)
                                    if package_name in common_packages:
                                        packages_to_install.add(common_packages[package_name])
                except Exception:
                    # Skip files that can't be read
                    pass
    
    # Install detected packages
    if packages_to_install:
        print(f"{Fore.GREEN}Detected imports of these packages:{Style.RESET_ALL}")
        for package in packages_to_install:
            print(f"  {Fore.CYAN}- {package}{Style.RESET_ALL}")
            try:
                import subprocess
                print(f"{Fore.YELLOW}Installing {package}...{Style.RESET_ALL}")
                pip_cmd = [sys.executable, "-m", "pip", "install", package]
                result = subprocess.run(pip_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                if result.returncode == 0:
                    print(f"{Fore.GREEN}✓ Installed {package}{Style.RESET_ALL}")
                else:
                    print(f"{Fore.RED}Error installing {package}: {result.stderr}{Style.RESET_ALL}")
            except Exception as e:
                print(f"{Fore.RED}Error installing {package}: {e}{Style.RESET_ALL}")
    else:
        print(f"{Fore.YELLOW}No common packages detected.{Style.RESET_ALL}")
def write_files(files, output_dir, key):
    # Write the decrypted files to disk with progress indicator
    total_files = len(files)
    print(f"{Fore.YELLOW}Extracting {total_files} files...{Style.RESET_ALL}")
    
    for idx, (file_path, encrypted_content) in enumerate(files.items(), 1):
        try:
            decrypted_content = decrypt_content(encrypted_content, key)
            full_path = os.path.join(output_dir, file_path)
            os.makedirs(os.path.dirname(full_path), exist_ok=True)
            
            with open(full_path, "wb") as f:
                f.write(decrypted_content)
            
            progress = int(50 * idx / total_files)
            progress_bar = "#" * progress + " " * (50-progress)
            sys.stdout.write(f"\r{Fore.CYAN}Progress: [{Fore.GREEN}{progress_bar}{Fore.CYAN}] {idx}/{total_files} files{Style.RESET_ALL}")
            sys.stdout.flush()
        except Exception as e:
            print(f"\n{Fore.RED}Error writing {file_path}: {e}{Style.RESET_ALL}")
    
    print()  # New line after progress bar
    print(f"{Fore.GREEN}✓ Files extracted successfully!{Style.RESET_ALL}")

def run_main_file(temp_dir, main_file):
    # Run the main file of the project
    if not main_file:
        print(f"{Fore.YELLOW}No main file specified. The project has been decrypted to: {temp_dir}{Style.RESET_ALL}")
        return
    
    main_path = os.path.join(temp_dir, main_file)
    if not os.path.exists(main_path):
        print(f"{Fore.RED}Main file {main_file} not found in the decrypted project.{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Available Python files:{Style.RESET_ALL}")
        for root, _, files in os.walk(temp_dir):
            for file in files:
                if file.endswith('.py'):
                    rel_path = os.path.relpath(os.path.join(root, file), temp_dir)
                    print(f"  {Fore.CYAN}{rel_path}{Style.RESET_ALL}")
        return
    
    # Install dependencies before running
    install_dependencies(temp_dir)
    
    sys.path.insert(0, temp_dir)
    
    # Change to the directory of the main file
    original_dir = os.getcwd()
    main_dir = os.path.dirname(main_path)
    os.chdir(main_dir)
    
    print(f"{Fore.GREEN}Running {main_file}...{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}{'=' * 60}{Style.RESET_ALL}")
    
    try:
        # Load and run the main module
        spec = importlib.util.spec_from_file_location("__main__", main_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except Exception as e:
        print(f"\n{Fore.RED}Error running {main_file}: {e}{Style.RESET_ALL}")
    finally:
        print(f"\n{Fore.YELLOW}{'=' * 60}{Style.RESET_ALL}")
        # Restore the original directory
        os.chdir(original_dir)

if __name__ == "__main__":
    print_banner()
    
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="Run encrypted Python project")
    parser.add_argument("-p", "--password", help="Decryption password")
    args = parser.parse_args()
    
    # Get password
    password = args.password
    if not password:
        try:
            import getpass
            password = getpass.getpass(f"{Fore.CYAN}Enter decryption password: {Style.RESET_ALL}")
        except ImportError:
            password = input(f"{Fore.CYAN}Enter decryption password: {Style.RESET_ALL}")
    
    salt = base64.b64decode(_0x53a8c2b)
    key = generate_key(password, salt)
    _security_monitor = protect_runtime(key, password)
    # Disable Flask auto-reload to prevent restart issues
    os.environ["FLASK_ENV"] = "development"
    os.environ["FLASK_DEBUG"] = "0"  # Disable auto-reload
    print(f"{Fore.YELLOW}Initializing decryption...{Style.RESET_ALL}")
    encrypted_data = base64.b64decode(_0xe72fd19)
    
    # Extract files
    print(f"{Fore.YELLOW}Extracting encrypted package...{Style.RESET_ALL}")
    files = extract_files(encrypted_data, key)
    
    # Create temporary directory
    print(f"{Fore.YELLOW}Creating temporary directory...{Style.RESET_ALL}")
    temp_dir = create_temp_dir()
    
    # Write files to temporary directory
    write_files(files, temp_dir, key)
    
    print(f"{Fore.GREEN}Project decrypted successfully in secure environment{Style.RESET_ALL}")
    
    # Run the main file
    run_main_file(temp_dir, _0x4f8e70a)